[project]
name = "spark-bootcamp-lesson-01"
version = "0.1.0"
description = "Apache Spark Fundamentals - Lesson 1 of the Spark Bootcamp"
authors = [
    {name = "Spark Bootcamp", email = "bootcamp@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9,<3.13"
keywords = ["apache-spark", "pyspark", "big-data", "distributed-computing", "bootcamp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core Spark dependencies
    "pyspark>=3.5.0,<3.6.0",

    # Jupyter and notebook dependencies
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.0.0",

    # Data science and visualization
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",

    # Development and testing
    "pytest>=7.4.0",
    "pytest-spark>=0.6.0",

    # Utilities
    "python-dotenv>=1.0.0",  # For .env file support
    "rich>=13.0.0",          # For beautiful terminal output
]

[project.optional-dependencies]
dev = [
    # Development tools
    "black>=23.0.0",         # Code formatting
    "isort>=5.12.0",         # Import sorting
    "flake8>=6.0.0",         # Linting
    "mypy>=1.5.0",           # Type checking
    "pre-commit>=3.0.0",     # Git hooks

    # Additional testing
    "pytest-cov>=4.0.0",    # Coverage reporting
    "pytest-xdist>=3.0.0",  # Parallel testing
]

performance = [
    # Performance monitoring
    "py4j>=0.10.9",          # Spark-Python bridge
    "psutil>=5.9.0",         # System monitoring
    "memory-profiler>=0.60.0", # Memory profiling
]

all = [
    "spark-bootcamp-lesson-01[dev,performance]"
]

[project.urls]
Homepage = "https://github.com/your-org/spark-bootcamp"
Documentation = "https://github.com/your-org/spark-bootcamp/tree/main/lessons/lesson-01-fundamentals"
Repository = "https://github.com/your-org/spark-bootcamp"
"Bug Tracker" = "https://github.com/your-org/spark-bootcamp/issues"

[project.scripts]
# Convenient scripts for running exercises
spark-exercise-1 = "exercises.exercise_1:run_exercises"
spark-exercise-2 = "exercises.exercise_2:run_exercises"
spark-exercise-3 = "exercises.exercise_3:run_exercises"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["exercises", "solutions", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "spark: marks tests that require Spark",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "py4j.*",
    "matplotlib.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["exercises", "solutions"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.uv]
dev-dependencies = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]
