# GitHub Actions CI/CD Pipeline
# This workflow runs on every push and pull request to ensure code quality

name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install dependencies
        run: |
          uv venv --python ${{ matrix.python-version }}
          source .venv/bin/activate
          uv sync --extra dev

      - name: Run pre-commit hooks
        run: |
          source .venv/bin/activate
          uv run pre-commit run --all-files

      - name: Run Python linting
        run: |
          source .venv/bin/activate
          uv run flake8 src/ tests/ scripts/

      - name: Run YAML linting
        run: |
          source .venv/bin/activate
          uv run yamllint .

      - name: Run type checking
        run: |
          source .venv/bin/activate
          uv run mypy src/

      - name: Run security checks
        run: |
          source .venv/bin/activate
          uv run bandit -r src/
          uv run safety check

  # Unit and Integration Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ["3.8", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Java (for Spark)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install dependencies
        run: |
          uv venv --python ${{ matrix.python-version }}
          source .venv/bin/activate
          uv sync

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          uv run pytest tests/unit/ -v

      - name: Run integration tests
        run: |
          source .venv/bin/activate
          uv run pytest tests/integration/ -v

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          uv run pytest --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ETL Pipeline Test
  etl-test:
    name: ETL Pipeline Test
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Java (for Spark)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install dependencies
        run: |
          uv venv --python 3.11
          source .venv/bin/activate
          uv sync

      - name: Test ETL pipeline with sample data
        run: |
          source .venv/bin/activate
          uv run python scripts/run_etl.py --create-sample-data --dry-run

      - name: Run full ETL pipeline
        run: |
          source .venv/bin/activate
          uv run python scripts/run_etl.py --create-sample-data

      - name: Verify ETL outputs
        run: |
          source .venv/bin/activate
          python -c "
          import os
          output_dir = 'data/output'
          if os.path.exists(output_dir):
              subdirs = [d for d in os.listdir(output_dir) if os.path.isdir(os.path.join(output_dir, d))]
              print(f'âœ… ETL generated {len(subdirs)} output datasets: {subdirs}')
              assert len(subdirs) > 0, 'No output datasets generated'
          else:
              raise AssertionError('Output directory not found')
          "

  # Documentation and Deployment
  docs-and-deploy:
    name: Documentation & Deployment
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, etl-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install dependencies
        run: |
          uv venv --python 3.11
          source .venv/bin/activate
          uv sync --extra dev

      - name: Generate documentation
        run: |
          source .venv/bin/activate
          # Add documentation generation commands here
          echo "ðŸ“š Documentation generation would happen here"

      - name: Create deployment artifact
        run: |
          # Create deployment package
          tar -czf spark-project-${{ github.sha }}.tar.gz \
            src/ \
            scripts/ \
            pyproject.toml \
            README.md \
            Makefile

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: spark-project-${{ github.sha }}
          path: spark-project-${{ github.sha }}.tar.gz
          retention-days: 30

  # Dependency Vulnerability Check
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install dependencies
        run: |
          uv venv --python 3.11
          source .venv/bin/activate
          uv sync --extra dev

      - name: Run dependency vulnerability check
        run: |
          source .venv/bin/activate
          uv run safety check --json > safety-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: safety-report.json
